# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven Docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Get timestamp
        id: timestamp
        run: echo "::set-output name=timestamp::$(date '+%d-%m-%Y:%H:%M')"

      - name: Build Maven inside Docker Container
        run: |
          branch=$(echo "${GITHUB_REF#refs/heads/}")
          timestamp=${{ steps.timestamp.outputs.timestamp }}
          docker run --rm \
              -v ${{ github.workspace }}:/workspace \
              -w /workspace \
              maven:3.8.4-openjdk-11 \
              sh -c "mvn clean compile assembly:single && \
                    mkdir -p target/${branch}/${timestamp} && \
                    cp target/my-project.jar target/${branch}/${timestamp}/my-project.jar"

      - name: List files and directories after build
        run: |
          ls -al
          ls -al target

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: v1.0.1
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/${{ github.ref }}/${{ steps.timestamp.outputs.timestamp }}/my-project-fat.jar
          asset_name: my-project-fat.jar
          asset_content_type: application/java-archive
