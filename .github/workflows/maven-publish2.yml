# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Maven Package

on:
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: 11

      - name: Build Maven
        run: mvn clean package

      - name: Build Maven inside Docker Container
        run: |
          branch=$(echo "${GITHUB_REF#refs/heads/}")
          timestamp=$(date '+%d-%m-%Y:%H:%M')
          docker run --rm \
              -v ${{ github.workspace }}:/workspace \
              -w /workspace \
              adoptopenjdk:11-jdk-hotspot \
              sh -c "mvn clean package && \
                    cp target/my-project-fat.jar target/${branch}/${timestamp}/fat-jar && \
                    cp target/my-project.jar target/${branch}/${timestamp}/jar"


      - name: Upload Fat JAR to GitHub Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./target/${{ github.ref }}/${{ env.timestamp }}/fat-jar
          asset_name: ${{ github.ref }}/fat-jar
          asset_content_type: application/java-archive

      - name: Upload JAR to GitHub Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./target/${{ github.ref }}/${{ env.timestamp }}/jar
          asset_name: ${{ github.ref }}/jar
          asset_content_type: application/java-archive

